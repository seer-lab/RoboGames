<level>
<description>You now have access to the &lt;color=#ff0000ff&gt;BREAKPOINTER&lt;/color&gt; tool.
It can enable &lt;color=#ff0000ff&gt;breakpoints&lt;/color&gt; that can check the program state.
Set a &lt;color=#ff0000ff&gt;BREAKPOINT&lt;/color&gt; where you notice the faded "B", then &lt;color=#ffff00ff&gt;PRINT&lt;/color&gt; it.
Use a BUGCATCHER once you know where the bug is.</description>
<next-level>level4a.xml</next-level>
<failure_level>Null</failure_level>
<introtext>One last tool to learn: 
the &lt;color=#ff0000ff&gt;BREAKPOINTER&lt;/color&gt; tool.
It can give more detailed feedback about variables.
Combine it with the &lt;color=#ffff00ff&gt;ACTIVATOR&lt;/color&gt; tool!</introtext>
<endtext>Now you have all the tools you need.
Time to find the final bugs!</endtext>
<timelimit>1000</timelimit>
<tools>
<tool name="catcher" enabled="true" count="unlimited"/>
<tool name="printer" enabled="true" count="unlimited"/>
<tool name="breakpointer" enabled="true" count="unlimited"/>
</tools>
<code language="c++">void main(){
    checkforBugs();
    //sum() returns the sum of two numbers (e.g. sum(1,1) == 1+1 == 2)
    <breakpoint text="Variables not defined yet!"></breakpoint>int x = sum(2,2);
    //multiply() returns the product of two numbers (e.g. multiply(2,3) == 2x3 == 6)
    <breakpoint text="x = 4"></breakpoint>     int y = m$bug$ultiply(3,4);
    <breakpoint tool="999,0,0,0,0,0" text="x = 4
    y = 9"></breakpoint>  return;
}
</code>
</level>