<level>
<next-level></next-level>
<description>Analyze the Triangle Systems
and make appropriate corrections</description>
<introtext>Can you decipher the
Triangle Systems?</introtext>
<endtext>You've deciphered the Triangle
Systems!</endtext>
<timelimit>unlimited</timelimit>
<tools>
<tool name="checker" enabled="true" count="unlimited"/>
<tool name="namer" enabled="true" count="unlimited"/>
<tool name="commenter" enabled="true" count="unlimited"/>
<tool name="uncommenter" enabled="true" count="unlimited"/>
<tool name="controlflow" enabled="true" count="unlimited"/>
</tools>
<code>// Welcome to the first level!
// This level will be pretty verbose (wordy/containing lots of words and explanations). Please take the time to read the green lines.
// Use the W, A, S, D keys to move around, and press LEFT CONTROL on your keyboard to throw projectiles.
// The // means this line is a Comment. Comments are ignored by the computer when the program is executed, they're just used for readability.
// This next line will include the IO (input/output) stream library. If you want to use cout and cin (you'll see its use in a bit) you will need this!
// Other libraries exist too, and you can use more than one, but to not overwhelm you, we'll just use "iostream" for now.
#include &lt;iostream&gt;
// This next one, "using standard namespace", just makes it easier to type and read our code.
// Make sure to include this for your programs.
// If you did not include it, you'd need to type cout like this every time: std::cout
// You don't NEED to have it, but it's highly recommended that you do when learning to program for the first time.
using namespace std;
// This is it! The start of the "main" function, which is the heart of our program. When the program executes, it will start from the open curly brace {
// and go line by line to the end of the program, the close curly brace }
// What does "void" mean? We'll get into the details of that later, but it is the program's "return type".
// Our function doesn't "return" anything to any other functions, we're just using the one function,
// so it's "void", or empty. Think of our main function sort of like a math function, like f(x).
// In this case, we have no variable x so it's just... f(), or in our case, main(). You'll need to put the brackets every time in C++. Sorry.
// Does it always need to be called main? The starting point of a program in C++ is the "main" function. The computer looks for
// the main function as its starting point. You could call it something else, but then the program will complain it cannot find "main" (entry point must be defined).
void main()
{
	// cout (pronounced c-out) tells the computer to output something onto the screen. In this case, we want to output the phrase Hello World.
	// The phrase must be in quotes so the program does not confuse this with other reserved words (like cout) that are used by
	// the programming language.
	// the keyword endl means it is the end of the line. It's not needed, but it will neatly space our output line by line.
	// Finally, in the C++ language, and in some other languages, the semicolon (;) is used as a delimiter to seperate instructions.
	// We'll get a little more into that later into that later but for now, make sure you put the semicolon at the end of each instruction.
	cout &lt;&lt; "Hello world" &lt;&lt; endl;
	// system("pause") tells the computer to wait for the user to close the window.
	// It will create the "Press any key to continue" line.
	// And for those curious, system() is its own function!
	system("pause");
	// Now, move to the following line and throw a projectile at the yellow text.
	cout &lt;&lt; <question text="What will this program display on the screen?
    Type your answer:
    	" answer="Hello world">"What will this program display on the screen?"</question>;
}
</code>
</level>
