<level>
<description>The Color Database contains some bugged values.
Remember, the &lt;color=#ffff00ff&gt;PRINTER&lt;/color&gt; tool can give you information.
Use the &lt;color=#ff00ffff&gt;WARPER&lt;/color&gt; tool to travel to the affected color groups.
Check the RGB values and use the BUGCATCHER to catch the bug.</description>
<next-level>level3b.xml</next-level>
<failure_level>level3a.xml</failure_level>
<introtext>The Color Database needs to be fixed.
You'll have to find which values are invalid.
The &lt;color=#ff00ffff&gt;WARPER&lt;/color&gt; tool will help!</introtext>
<endtext>You found the first bugged color value!
There are still more bugs to find.</endtext>
<timelimit>180</timelimit>
<tools>
<tool name="printer" enabled="true" count="3"/>
</tools>
<code language="python">#Color Database
#Loads database of colors and sub-categories of colors
#matches color Red, Green, and Blue (RGB) values with English names
#IMPORTANT NOTE: color values range from 000 to 255

class color:
    def __init__(name,r,g,b):
		self.name = name
		self.r = r
		self.g = g
		self.b = b

def LoadColors(cm, db):
	#cm is the colormanager class that manages all colors 
	#db is the database of color values
    cm.initialize()
    <print text="$err$A green color value
in the database
is out of bounds" tool="1,0,8,0,0,0">db.checkColors()</print>
	
    cm.Blues = db.getBlues()
    cm.Reds = db.getReds()
    
    <warp file="L3aBlues.xml">cm.Blues
	</warp>	
    <warp file="L3aReds.xml">cm.Reds
	</warp>

</code>
</level>